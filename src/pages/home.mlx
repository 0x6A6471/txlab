open React
open Melange_bitcoin_lib
open Utils

type t = Psbt.psbt_tx_output array

let[@react.component] make () =
  let hex, set_hex = useState (fun _ -> "") in
  let outputs, set_outputs = useState (fun _ : t -> [||]) in
  let error, set_error = useState (fun _ -> None) in
  let handle_input_change event =
    set_error (fun _ -> None);
    set_outputs (fun _ -> [||]);
    let value = (Event.Form.target event)##value in
    set_hex (fun _ -> value)
  in
  let handle_submit e =
    Event.Form.preventDefault e;
    try
      let psbt = Psbt.fromHex hex () in
      let outputs = Psbt.getTxOutputs psbt in
      set_outputs (fun _ -> outputs)
    with
    | exn ->
      let error_message = Printexc.to_string exn in
      Js.log2 "Error occurred: " error_message;
      set_error (fun _ -> Some "Invalid transaction hex")
  in
  let script_text code =
    match Ops.is_op_code code with
    | true -> <Ui.Badge key=code variant=`secondary label=code />
    | false -> <p key=code>(string code)</p>
  in
  <main className="space-y-16">
    <form onSubmit=handle_submit>
      <div>
        <label htmlFor="hex">(string "Transaction hex")</label>
        <div>
          <textarea id="hex"
                    name="hex"
                    type_="text"
                    autoFocus=true
                    className="mt-1 outline-0 ring-1 ring-gray-900 \
                               focus-visible:ring-gray-700 rounded-xl p-2 \
                               w-full min-h-52"
                    onChange=handle_input_change />
        </div>
      </div>
      <div className="mt-2 flex justify-between items-center">
        (match error with
         | None -> <div />
         | Some error ->
           <div className="inline-flex items-center gap-x-2  text-sm text-error">
             <Ui.Icon name="alert-triangle" /> (string error)
           </div>)
        <button type_="submit"
                className="rounded-full bg-gray-400 px-3 py-1.5 text-sm \
                           font-medium text-gray-950 shadow-sm \
                           hover:bg-gray-300 focus-visible:outline \
                           focus-visible:outline-1 \
                           focus-visible:outline-offset-2 \
                           focus-visible:outline-gray-400">
          (string "Submit")
        </button>
      </div>
    </form>
    (match outputs with
     | [||] -> null
     | _ ->
       <div>
         <h2 className="inline-flex items-center gap-x-2 mb-4 text-lg \
                        text-gray-50">
           <Ui.Icon name="arrow-right" /> <span>(string "Outputs")</span>
         </h2>
         <ul className="space-y-4">
           (Array.mapi
              (fun index (output : Psbt.psbt_tx_output) ->
                let asm = Script.toASM (Script.BufferChunks output.script) in
                let script_type = Ops.get_script_type_from_asm asm in
                let split = String.split_on_char ' ' asm in
                <li key=(string_of_int index)
                    className="rounded-xl bg-gray-950 flex flex-col">
                  <div className="border-b border-gray-900/50 p-4">
                    <h3 className="text-candle">
                      (string @@ "outputs[" ^ string_of_int index ^ "]")
                    </h3>
                  </div>
                  <dl className="divide-y divide-gray-900/50">
                    (* TODO: replace with radix bindings popover to display btc on hover *)
                    <div className="p-4 sm:grid sm:grid-cols-6 sm:gap-4">
                      <dt>(string "Value")</dt>
                      <dd className="sm:col-span-5">
                        (string @@ Js.Bigint.toString output.value ^ " sats")
                      </dd>
                    </div>
                    <div className="p-4 sm:grid sm:grid-cols-6 sm:gap-4 \
                                    break-words">
                      <dt>(string "Script")</dt>
                      <dd className="sm:col-span-5 space-y-6">
                        (match output.address with
                         | Some address ->
                           <div className="flex flex-col md:flex-row \
                                           justify-between md:items-center">
                             <div className="flex items-center space-x-1">
                               <Ui.Badge label=script_type />
                               <p className="text-xs">(string "lock script")</p>
                             </div>
                             <p>(string address)</p>
                           </div>
                         | None -> null)
                        <div className="space-y-1">
                          (split
                           |> Array.of_list
                           |> Array.map script_text
                           |> React.array)
                        </div>
                      </dd>
                    </div>
                  </dl>
                </li>)
              outputs
            |> array)
         </ul>
       </div>)
  </main>
;;
